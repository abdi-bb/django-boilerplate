# Django Rest Auth
# Testing tokens (access=90days, refresh=180days)

{
  "access": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzIzNzEwNTE0LCJpYXQiOjE3MTU5MzQ1MTQsImp0aSI6ImQ3YzkyNmE4NmM5NDRjNDQ4MTdlZGVkZThhMGIyYzhhIiwidXNlcl9pZCI6MTh9.seW7WucwwBluVen9Q9xg7v_5T1p74J_fmb_Xf71BFL8",
  "refresh": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTczMTQ4NjUxNCwiaWF0IjoxNzE1OTM0NTE0LCJqdGkiOiIwYTVlYzIwNDIzNTg0N2QzYTcxNWFiMmIyMDlmMjFlYSIsInVzZXJfaWQiOjE4fQ.xawnI-4KaUMJR0D7qm6b84jCbCcv_WC34IWkpruduLE",
}

# 1. Register a new user
# Registration
# /users/registration/ (POST)
# first_name
# last_name
# password1
# password2
# email
POST http://127.0.0.1:8000/api/users/registration/
Content-Type: application/json

{
    "email": "testuser9@gmail.com",
    "password1": "mylogin8#",
    "password2": "mylogin8#",
    "first_name": "Test",
    "last_name": "User"
}


# 2. Verify email for the registered new user
# /users/registration/verify-email/ (POST)
# key
# Note If you set account email verification as mandatory, you have to add the VerifyEmailView with the used name. You need to import the view: from dj_rest_auth.registration.views import VerifyEmailView. Then add the url with the corresponding name: path('users/account-confirm-email/', VerifyEmailView.as_view(), name='account_email_verification_sent') to the urlpatterns list.
POST http://127.0.0.1:8000/api/users/registration/verify-email/
Content-Type: application/json

{
    "key": "MTk:1s7uhS:wKsf6A2YSknN1tEWncAPvpM4ueLib6ZiUvgpWAZeDB0"
}


# 3. Resend email verification in case the user requests it
# /users/registration/resend-email/ (POST)
# email
# Resends the email verification
POST http://127.0.0.1:8000/api/users/registration/resend-email/
Content-Type: application/json

{
    "email": "notverified@gmail.com"
}


# 4. Login the email verified user
# Basic
# /users/login/ (POST)
# email
# password
# Returns Token key
POST http://127.0.0.1:8000/api/users/login/
Content-Type: application/json

{
    "email": "testuser9@gmail.com",
    "password": "mylogin8#"
}


# 5. Logout the logged in user
# /users/logout/ (POST)
# Note ACCOUNT_LOGOUT_ON_GET = True to allow logout using GET - this is the exact same configuration from allauth. NOT recommended, see: http://django-allauth.readthedocs.io/en/latest/views.html#logout
POST http://127.0.0.1:8000/api/users/logout/
Content-Type: application/json


# 6. Reset password for the user in case they forget it
# /users/password/reset/ (POST)
# email
POST http://127.0.0.1:8000/api/users/password/reset/
Content-Type: application/json

{
    "email": "testuser4@gmail.com"
}


# 7. Confirm the password reset (automatically triggered by the reset password)
# /users/password/reset/confirm/ (POST)
# uid
# token
# new_password1
# new_password2
# Note uid and token are sent in email after calling /users/password/reset/
POST http://127.0.0.1:8000/api/users/password/reset/confirm/
Content-Type: application/json

{
    "uid": "h",
    "token": "c75s3e-d8ea0449cab56609250453be39dd466b",
    "new_password1": "mylogo8#",
    "new_password2": "mylogo8#"
}


# 8. Change password for the logged in user
# /users/password/change/ (POST)
# new_password1
# new_password2
# old_password
# Note OLD_PASSWORD_FIELD_ENABLED = True to use old_password.
# Note LOGOUT_ON_PASSWORD_CHANGE = False to keep the user logged in after password change
POST http://127.0.0.1:8000/api/users/password/change/
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzE1OTI4ODg1LCJpYXQiOjE3MTU5Mjg1ODUsImp0aSI6ImFlMDhlOTFkMTA0YzQwNzRiMzNkMjcxMGEzYzYxYmUzIiwidXNlcl9pZCI6MTd9.vSMrUvfEGvlkZetMvLUuvRcIYnNAomAzq9kXhUzWrAE
Content-Type: application/json

{
    "new_password1": "mylogin8#",
    "new_password2": "mylogin8#",
    "old_password": "mylogo8#"
}


# 9. Update the user (related to the auth user)
# /users/user/ (GET, PUT, PATCH)
# username
# first_name
# last_name
# Returns pk, username, email, first_name, last_name
http://127.0.0.1:8000/api/users/user/
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzIzNzEwNTE0LCJpYXQiOjE3MTU5MzQ1MTQsImp0aSI6ImQ3YzkyNmE4NmM5NDRjNDQ4MTdlZGVkZThhMGIyYzhhIiwidXNlcl9pZCI6MTh9.seW7WucwwBluVen9Q9xg7v_5T1p74J_fmb_Xf71BFL8


# 10. Update the user profile (related to the profile data not the auth)
# Profile
# /users/profile/ (GET, PUT, PATCH)
http://127.0.0.1:8000/api/users/profile/
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzE1OTI4ODg1LCJpYXQiOjE3MTU5Mjg1ODUsImp0aSI6ImFlMDhlOTFkMTA0YzQwNzRiMzNkMjcxMGEzYzYxYmUzIiwidXNlcl9pZCI6MTd9.vSMrUvfEGvlkZetMvLUuvRcIYnNAomAzq9kXhUzWrAE

# 11. Update the user profile (related to the profile data not the auth)
# Profile
# /users/profile/ (GET, PUT, PATCH)
PUT http://127.0.0.1:8000/api/users/profile/
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzIzNzA3MDYyLCJpYXQiOjE3MTU5MzEwNjIsImp0aSI6IjU2NWYwMTUwNDcyMzRmZjRiMjAyZDY4YjE2Mjk3ZDFjIiwidXNlcl9pZCI6MTd9.z2fLxqWgT83wPVMUjx5xUivX90JTId4eVI7nWKZCwY4
Content-Type: application/json

{
    "bio": "I am a software engineer!"
}



# 11. Verify the jwt access token
# /users/token/verify/ (POST)
# token
# Returns an empty JSON object.
# Note USE_JWT = True to use token/verify/ route.
# Note Takes a token and indicates if it is valid. This view provides no information about a tokenâ€™s fitness for a particular use. Will return a HTTP 200 OK in case of a valid token and HTTP 401 Unauthorized with {"detail": "Token is invalid or expired", "code": "token_not_valid"} in case of a invalid or expired token.
POST http://127.0.0.1:8000/api/users/token/verify/
Content-Type: application/json

{
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzIzNzA3NDEwLCJpYXQiOjE3MTU5MzE0MTAsImp0aSI6Ijc2YmU3MTJmOGQzNTQ0MzlhNzU4NTFlZGZhY2IyY2NmIiwidXNlcl9pZCI6MTd9.v-J0i_ajBmuFptf4pcqwtCupOxYBovU_Y7HG-MQjxT4"
}


# 12. Refresh the jwt access token using the refresh token
# /users/token/refresh/ (POST) (see also)
# refresh
# Returns access
# Note USE_JWT = True to use token/refresh/ route.
# Note Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid. HTTP 401 Unauthorized with {"detail": "Token is invalid or expired", "code": "token_not_valid"} in case of a invalid or expired token.
POST http://127.0.0.1:8000/api/users/token/refresh/
Content-Type: application/json

{
    "refresh": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTczMTQ4MzQxMCwiaWF0IjoxNzE1OTMxNDEwLCJqdGkiOiI4MWRhZDFkMDkwYTI0YWMwOGZlZmVhNDUyZGZhOWQ5MyIsInVzZXJfaWQiOjE3fQ.z1jFDh2OASIk008wCyypvUtqbeAMpCAxtHxokfFRvyA"
}


# 13. Login using google
# /users/google/ (POST)
# access_token
# Returns Token key
POST http://127.0.0.1:8000/api/users/google/
Content-Type: application/json

{
    "access_token": "ya"
}